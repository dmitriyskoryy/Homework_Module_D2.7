python manage.py shell

from news.models import *

# создаем пользователей и добавляем их в авторы(создаем два объекта Author связанных с пользователями Dima и Masha)
user1 = User.objects.create(username='Dima', first_name='Sk')
Author.objects.create(authorUser=user1)
user2 = User.objects.create(username='Masha', first_name='Det')
Author.objects.create(authorUser=user2)

# создаем 4 категории
Category.objects.create(name='IT')
Category.objects.create(name='Crimes')
Category.objects.create(name='Sport')
Category.objects.create(name='Games')



# Создаем 2 статьи и 1 новость
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Dima')), categoryType='NW', title='nw Title', text='nw text')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Dima')), categoryType='AR', title='sdfsdf Title', text='sdfsdf text')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Masha')), categoryType='AR', title='23234 Title', text='234235 text')


# Присвоим категории
# получим посты
p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)

# получим категории
c1 = Category.objects.get(name='IT')
c2 = Category.objects.get(name='Crimes')

# Теперь добавим связи. Берем объект у которого прописаны поле связи
p1.postCategory.add(c1)

# так как поле ManyToMany, то можем добавить несколько связей
p2.postCategory.add(c1, c2)  
  
p3.postCategory.add(c2)



# Далее добавим комментарий
# получаем юзера и указываем к какому посту комментарий
Comment.objects.create(commentUser=User.objects.get(username='Dima'), commentPost=Post.objects.get(pk=1), text='comment from Dima on post 1')
Comment.objects.create(commentUser=User.objects.get(username='Masha'), commentPost=Post.objects.get(pk=1), text='comment from Masha on post 1')
Comment.objects.create(commentUser=User.objects.get(username='Dima'), commentPost=Post.objects.get(pk=2), text='comment from Dima on post 2')
Comment.objects.create(commentUser=User.objects.get(username='Masha'), commentPost=Post.objects.get(pk=3), text='comment from Masha on post 3')
Comment.objects.create(commentUser=User.objects.get(username='Dima'), commentPost=Post.objects.get(pk=3), text='comment from Dima on post 3')


# Далее проставим лайк, дизлайк постам и новостям
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()


# Далее проставим лайк, дизлайк комментариям
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).dislike()



# Теперь нужно обновить рейтинг пользователей
Author.objects.get(authorUser=User.objects.get(username='Dima')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Masha')).update_rating()


# выведем username и рейтинг лучшего пользователя
best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
userId = list(best.values())[0]
userRat = list(best.values())[1]
username = User.objects.get(pk=userId)
print(f'{username}: {userRat}')


# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи
bestPost = Post.objects.all().order_by('-rating').values('dateCreation', 'author', 'rating', 'title', 'id')[0]
dateAdd = list(bestPost.values())[0]
author = list(bestPost.values())[1]
username = User.objects.get(pk=author)
rating = list(bestPost.values())[2]
title = list(bestPost.values())[3]
preview = Post.objects.get(title=title, author=author).preview()
postId = list(bestPost.values())[4]
print(f'{dateAdd}; {username}; {rating}; {title}; {preview}')


# И вывести все комментарии к этой статье
commentsBestPost = Comment.objects.filter(commentPost=postId).values('dateCreation', 'commentUser', 'rating', 'text')   
print(commentsBestPost)

























